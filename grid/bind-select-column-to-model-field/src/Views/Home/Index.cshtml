@(Html.Kendo().Grid<KendoGridBindSelectColumn.Models.ProductViewModel>()
      .Name("grid")
      .Columns(columns =>
      {
          columns.Select();
          columns.Bound(product => product.ProductID).Width(100);
          columns.Bound(product => product.ProductName);
          columns.Bound(product => product.UnitsInStock).Width(250);
          columns.Command(commands =>
          {
              commands.Edit(); // The "edit" command will edit and update data items
              commands.Destroy(); // The "destroy" command removes data items
          }).Title("Commands").Width(200);
      })
      .Events(ev => ev.DataBound("onDataBound"))
      .ToolBar(toolbar => toolbar.Create()) // The "create" command adds new data items
      .Editable(editable => editable.Mode(GridEditMode.InLine)) // Use inline editing mode
      .DataSource(dataSource =>
          dataSource.Ajax()
            .Model(model =>
            {
                model.Id(product => product.ProductID); // Specify the property which is the unique identifier of the model
                model.Field(product => product.ProductID).Editable(false); // Make the ProductID property not editable
            })
            .Create(create => create.Action("Products_Create", "Home")) // Action invoked when the user saves a new data item
            .Read(read => read.Action("Products_Read", "Home"))  // Action invoked when the grid needs data
            .Update(update => update.Action("Products_Update", "Home"))  // Action invoked when the user saves an updated data item
            .Destroy(destroy => destroy.Action("Products_Destroy", "Home")) // Action invoked when the user removes a data item
      )
      .Pageable()
)

<script>
    function onDataBound(e){
        var grid = $("#grid").getKendoGrid();

        var dataOnCurrentPage = grid.dataSource.view();
        dataOnCurrentPage.forEach(function (model) {
            if (model.Discontinued == true) {
                var uid = model.uid;
                var row = $("#grid tbody tr[data-uid=" + uid + "]");
                grid.select(row);
            }
        });

        $("input.k-checkbox").on("change", function (e) {
            var dataItem = grid.dataItem(this.closest("tr"));

            if (dataItem.Discontinued != this.checked) {
                dataItem.set("Discontinued", this.checked);
                dataItem.dirty = true;
            }

            grid.dataSource.sync();
        });
    }
</script>